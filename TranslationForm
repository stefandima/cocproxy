import React, {Component} from 'react';
import {
    Button,
    Card,
    CardHeader,
    CardBody,
    Col,
    Container,
    Row,
    UncontrolledTooltip
} from 'reactstrap';
import {connect} from "react-redux";
import Select from "react-select";
import {translationActions} from "../../_actions";
import {translationService} from "../../_services/translations.service";
import authService from "../../_services/auth.service";
import {Formik, Field, Form} from "formik";
import confirm from "reactstrap-confirm";
import * as Yup from "yup";
import {trackPromise} from "react-promise-tracker";
import {config} from '../../_config/Config';

const validationSchema = Yup.object().shape({
//    tenant: Yup.object().required("tenant is required").nullable(),
//    component: Yup.object().required("component is required").nullable(),
    component: Yup.array().length(1, "only 1 Component required"),
    textKey: Yup.string().required("Key is required").min(1),
    language: Yup.object().required("Language is required").nullable(),
    channel: Yup.array().length(1, "only 1 Channel required"),
//    text: Yup.string().required("text is required").min(1),
//    description: Yup.string().required("description is required").min(1),
});

const selectStyles = { menu: styles => ({ ...styles, zIndex: 999 }) };
class TranslationFormComponent extends Component {
    constructor(props) {
        super(props);

        this.formRef = React.createRef();
        this.refComponentSelect = React.createRef();
        this.refLanguageSelect = React.createRef();
        this.refChannelSelect = React.createRef();

        this.state = {
            searchBy: '',
            component: [],
            textKey: '',
            language: '',
            channel: [],
            text: '',
            description: '',
            submitted: false,
            exported: false,
        };
    }

    submit = (values, {setSubmitting }) => {
        setSubmitting(true);
        trackPromise(
          translationService.create(this.props.tenant?.value, values.component?.[0]?.value, values.language?.value, values.channel?.[0]?.value, values.textKey, values.text, values.description)
        ).then(value => {
              const {component, language, channel, key, text, description} = value;
              const filters = {component: [component], language, channel: [channel], textKey:key, text, description};
              this.setState(filters);
              this.props.setFilters(filters);
              this.notify("Translation created.");
        }).catch(error => this.confirmError('Failed create (error: ' + (error.status === 409 ? 'duplicate' : error) + ')')
        ).finally(() => setSubmitting(false));
    }

    search = (values) => {
        values &&
        this.props.setFilters({
            searchBy: values.searchBy?.trim() ? values.searchBy : null,
            component: values.component?.map(c => c.value),
            language: values.language?.value,
            channel: values.channel?.map(c => c.value),
            textKey: values.textKey,
            text: values.text,
            description: values.description,
            tick: Date.now()
        })
    }

    handleLogout = async () => {
        const r = await confirm({
            title: 'Are you sure ?',
            message: 'You will be returned to the login screen.',
            cancelText: 'Cancel',
            confirmText: 'OK'
        });
        if (r) {
            authService.logout(true);
        }
    }
    
    confirmError = async (message) => {
        await confirm({
            title: 'Error!',
            message,
            cancelText: null,
            confirmText: 'OK'
        });
    }

    notify = async (message) => {
        await confirm({
            title: 'Success!',
            message,
            cancelText: null,
            confirmText: 'OK'
        })
    }

    handleClear = (e) => { // TODO ???
        e.preventDefault();

        this.setState({
            component: []
            , textKey: ''
            , language: ''
            , channel: []
            , text: ''
            , description: ''
            , submitted: false
        });
        this.formRef.current.reset()
    }

    handleClearFilters = (setFieldValue) => {
        setFieldValue("component", []);
        setFieldValue("textKey", "");
        setFieldValue("language", null);
        setFieldValue("channel", []);
        setFieldValue("text", "");
        setFieldValue("description", "");
    }

    findOptionByValue = (options, value) => {
        return options && options.find(o => o.value === value);
    }

    isInitialValid = (props) => {
        if (!props.validationSchema) return true;
        return props.validationSchema.isValidSync(props.initialValues);
    }

    render() {
        const {creating, tenant, components, languages, channels} = this.props;
        const {component, submitted} = this.state;
        return (
          <Formik
            initialValues={{
                searchBy: "",
                textKey: "",
                text: "",
                description: "",
                language: null,
                component: [],
                channel: []
                }}
            validationSchema={validationSchema}
            isInitialValid={this.isInitialValid}
            validateOnMount={true}
            validateOnChange={true}
            validateOnBlur={true}
            enableReinitialize={true}
            onSubmit={(values, actions) => this.submit(values, actions)}
            // onSubmit={(values, {setSubmitting }) => {
            //     setSubmitting(true);
            //     console.log("onSubmit", values);
            //     alert("Form is validated! Submitting the form...");
            //     setSubmitting(false);
            // }}
          >
              {(fkProps) => (
                    <div>
                        <Container fluid="md">
                            <Card className="p-2">
                                <CardHeader><span>Translations Management - [{tenant.label}]</span>
                                    <Button className="btn-sm float-right py-0"
                                            color="secondary"
                                            onClick={this.handleLogout}>Logout
                                        <span className="oi oi-account-logout" style={{paddingLeft: '4px'}}></span>
                                    </Button>
                                </CardHeader>
                                <CardBody>
                                    <Form>
                                        <Row>
                                            <div className="col-2">
                                                <div className="form-group">
                                                    <label className="control-label" htmlFor="searchBy">Search by</label>
                                                    <Field
                                                      type="input"
                                                      name="searchBy"
                                                      placeholder="Free text ..."
                                                      onKeyPress={(e) => e.which === 13 && this.search(fkProps.values)}
                                                      onChange={(e) => {fkProps.setFieldValue("searchBy", e.target.value); this.handleClearFilters(fkProps.setFieldValue); }}
                                                      className="form-control"
                                                    />
                                                </div>
                                            </div>
                                            <Col>
                                                <Row className="bg-light">
                                                    <Col xs={2}>
                                                        <div className="form-group required">
                                                            <label  className="control-label" htmlFor="component">Component</label>
                                                            <Select name="component"
                                                                    ref={ref => this.refComponentSelect = ref}
                                                                    isClearable={true}
                                                                    isMulti={true}
                                                                    value={fkProps.values.component}
                                                                    options={components}
                                                                    onKeyDown={(e) => {
                                                                        if (e.which === 13 && !this.refComponentSelect.state.menuIsOpen) {
                                                                            e.preventDefault();
                                                                            this.search(fkProps.values)
                                                                        }
                                                                    }}
                                                                    onBlur={option => fkProps.setFieldTouched("component", true)}
                                                                    onChange={async option => {await fkProps.setFieldValue("component", option); fkProps.setFieldValue("searchBy", "")}}
                                                                    className="w-100"
                                                                    styles={selectStyles}
                                                            />
                                                            {submitted && !component &&
                                                            <div className="help-block">Component is required</div>
                                                            }
                                                        </div>
                                                    </Col>
                                                    <Col>
                                                        <div className="form-group required">
                                                            <label className="control-label" htmlFor="textKey">Key</label>
                                                            <Field
                                                              type="input"
                                                              name="textKey"
                                                              onKeyPress={(e) => e.which === 13 && this.search(fkProps.values)}
                                                              onBlur={async e => {await fkProps.setFieldValue("textKey", e.target.value.trim()); }}
                                                              onChange={async e => {await fkProps.setFieldValue("textKey", e.target.value); fkProps.setFieldValue("searchBy", "")}}
                                                              className="form-control"
                                                            />
                                                        </div>
                                                    </Col>
                                                    <Col xs={2}>
                                                        <div className="form-group required">
                                                            <label className="control-label" htmlFor="language">Language</label>
                                                            <Select name="language"
                                                                    ref={ref => this.refLanguageSelect = ref}
                                                                    isClearable={true}
                                                                    options={languages}
                                                                    value={fkProps.values.language}
                                                                    onKeyDown={(e) => {
                                                                      if (e.which === 13 && !this.refLanguageSelect.state.menuIsOpen) {
                                                                          e.preventDefault();
                                                                          this.search(fkProps.values)
                                                                      }
                                                                    }}
                                                                    onBlur={option => fkProps.setFieldTouched("language", true)}
                                                                    onChange={async option => {await fkProps.setFieldValue("language", option); fkProps.setFieldValue("searchBy", "")}}
                                                                    className="w-100"
                                                                    styles={selectStyles}
                                                            />
                                                        </div>
                                                    </Col>
                                                    <Col xs={2}>
                                                        <div className="form-group required">
                                                            <label  className="control-label" htmlFor="channel">Channel</label>
                                                            <Select name="channel"
                                                                    ref={ref => this.refChannelSelect = ref}
                                                                    isClearable={true}
                                                                    isMulti={true}
                                                                    value={fkProps.values.channel}
                                                                    options={channels}
                                                                    onKeyDown={(e) => {
                                                                        if (e.which === 13 && !this.refChannelSelect.state.menuIsOpen) {
                                                                            e.preventDefault();
                                                                            this.search(fkProps.values)
                                                                        }
                                                                    }}
                                                                    onBlur={option => fkProps.setFieldTouched("channel", true)}
                                                                    onChange={async option => {await fkProps.setFieldValue("channel", option); fkProps.setFieldValue("searchBy", "")}}
                                                                    className="w-100"
                                                                    styles={selectStyles}
                                                            />
                                                        </div>
                                                    </Col>
                                                    <Col>
                                                        <div className="form-group">
                                                            <label className="control-label" htmlFor="text">Text</label>
                                                            <Field
                                                              type="input"
                                                              name="text"
                                                              onKeyPress={(e) => {
                                                                  if (e.which === 13 && e.shiftKey === true) {
                                                                      e.preventDefault();
                                                                      this.search(fkProps.values);
                                                                  }
                                                              }}
                                                              onChange={(e) => {fkProps.setFieldValue("text", e.target.value); fkProps.setFieldValue("searchBy", "")}}
                                                              component="textarea"
                                                              rows="1"
                                                              className="form-control"
                                                            />
                                                        </div>
                                                    </Col>
                                                    <Col xs={1}>
                                                        <div className="form-group">
                                                            <label className="control-label" htmlFor="description">Description</label>
                                                            <Field
                                                              type="input"
                                                              name="description"
                                                              onKeyPress={(e) => {
                                                                  if (e.which === 13 && e.shiftKey === true) {
                                                                      e.preventDefault();
                                                                      this.search(fkProps.values);
                                                                  }
                                                              }}
                                                              onChange={(e) => {fkProps.setFieldValue("description", e.target.value); fkProps.setFieldValue("searchBy", "")}}
                                                              component="textarea"
                                                              rows="1"
                                                              className="form-control"
                                                            />
                                                        </div>
                                                    </Col>
                                                </Row>
                                            </Col>
                                        </Row>
                                        {/*{JSON.stringify(fkProps)}*/}
                                        <Row className="justify-content-between mt-1">
                                            <Col className="col-sm-auto">
                                                <Button color="primary"
                                                        className="px-4"
                                                        disabled={!tenant}
                                                        onClick={(e) => {
                                                            e.preventDefault();
                                                            this.search(fkProps.values);
                                                        }}>Search</Button>
                                            </Col>
                                            <Col className="col-sm-auto">
                                                <Button type="reset"
                                                        color="danger"
                                                        className="px-4">Clear</Button>
                                            </Col>
                                            <Col className="col-sm-auto text-right">
                                                <span id="submit">
                                                    <Button type="submit"
                                                            color="success"
                                                            className="px-4"
                                                            style={{pointerEvents: (fkProps.isSubmitting || !fkProps.isValid) ? 'none' : 'auto'}}
                                                            disabled={fkProps.isSubmitting || !fkProps.isValid}>Create</Button>
                                                </span>
                                                {Object.values(fkProps.errors).length > 0
                                                  ?
                                                    <UncontrolledTooltip placement="auto" target="submit">
                                                        <span style={{whiteSpace: 'pre-line'}}>
                                                            {Object.values(fkProps.errors).join("\n")}
                                                        </span>
                                                    </UncontrolledTooltip>
                                                  : null
                                                }
                                                {creating}
                                            </Col>
                                        </Row>
                                    </Form>
                                </CardBody>
                            </Card>
                        </Container>
                    </div>
              )}

          </Formik>
        );
    }
}

const actionCreators = {
    create: translationActions.create,
    setFilters: translationActions.setFilters

};

function mapState(state) {
    const {tenant} = state.authentication;
    const {tenants} = state.translations;
    // after import the tenants components are updated
    let components = tenants?.find(t => t.value === tenant?.value)?.components || tenant?.components;
    components && components.sort();
    return {tenant, components: components?.map(c => ({value: c, label: c})), languages: tenant?.languages || config.languages, channels: tenant?.channels || config.channels}
}

const TranslationForm = connect(mapState, actionCreators)(TranslationFormComponent);
export default TranslationForm;
